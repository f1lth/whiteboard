[{"X:\\Code\\files\\HTN\\my-whiteboard\\src\\index.js":"1","X:\\Code\\files\\HTN\\my-whiteboard\\src\\App.js":"2","X:\\Code\\files\\HTN\\my-whiteboard\\src\\reportWebVitals.js":"3","X:\\Code\\files\\HTN\\my-whiteboard\\src\\Board.js":"4"},{"size":205,"mtime":1610850138577,"results":"5","hashOfConfig":"6"},{"size":528,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":4811,"mtime":1610849983400,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1mpobqy",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"X:\\Code\\files\\HTN\\my-whiteboard\\src\\index.js",[],["21","22"],"X:\\Code\\files\\HTN\\my-whiteboard\\src\\App.js",[],["23","24"],"X:\\Code\\files\\HTN\\my-whiteboard\\src\\reportWebVitals.js",[],"X:\\Code\\files\\HTN\\my-whiteboard\\src\\Board.js",["25"],"import React, { useRef, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport io from 'socket.io-client';\r\nimport './styles/board.css';\r\n\r\n\r\nconst Board = () => {\r\n  const canvasRef = useRef(null);\r\n  const colorsRef = useRef(null);\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n\r\n    // --------------- getContext() method returns a drawing context on the canvas-----\r\n\r\n    const canvas = canvasRef.current;\r\n    const test = colorsRef.current;\r\n    const context = canvas.getContext('2d');\r\n\r\n    // ----------------------- Colors --------------------------------------------------\r\n\r\n    const colors = document.getElementsByClassName('color');\r\n    console.log(colors, 'the colors');\r\n    console.log(test);\r\n    // set the current color\r\n    const current = {\r\n      color: 'black',\r\n    };\r\n\r\n    // helper that will update the current color\r\n    const onColorUpdate = (e) => {\r\n      current.color = e.target.className.split(' ')[1];\r\n    };\r\n\r\n    // loop through the color elements and add the click event listeners\r\n    for (let i = 0; i < colors.length; i++) {\r\n      colors[i].addEventListener('click', onColorUpdate, false);\r\n    }\r\n    let drawing = false;\r\n\r\n    // ------------------------------- create the drawing ----------------------------\r\n\r\n    const drawLine = (x0, y0, x1, y1, color, emit) => {\r\n      context.beginPath();\r\n      context.moveTo(x0, y0);\r\n      context.lineTo(x1, y1);\r\n      context.strokeStyle = color;\r\n      context.lineWidth = 2;\r\n      context.stroke();\r\n      context.closePath();\r\n\r\n      if (!emit) { return; }\r\n      const w = canvas.width;\r\n      const h = canvas.height;\r\n\r\n      socketRef.current.emit('drawing', {\r\n        x0: x0 / w,\r\n        y0: y0 / h,\r\n        x1: x1 / w,\r\n        y1: y1 / h,\r\n        color,\r\n      });\r\n    };\r\n\r\n    // ---------------- mouse movement --------------------------------------\r\n\r\n    const onMouseDown = (e) => {\r\n      drawing = true;\r\n      current.x = e.clientX || e.touches[0].clientX;\r\n      current.y = e.clientY || e.touches[0].clientY;\r\n    };\r\n\r\n    const onMouseMove = (e) => {\r\n      if (!drawing) { return; }\r\n      drawLine(current.x, current.y, e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY, current.color, true);\r\n      current.x = e.clientX || e.touches[0].clientX;\r\n      current.y = e.clientY || e.touches[0].clientY;\r\n    };\r\n\r\n    const onMouseUp = (e) => {\r\n      if (!drawing) { return; }\r\n      drawing = false;\r\n      drawLine(current.x, current.y, e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY, current.color, true);\r\n    };\r\n\r\n    // ----------- limit the number of events per second -----------------------\r\n\r\n    const throttle = (callback, delay) => {\r\n      let previousCall = new Date().getTime();\r\n      return function() {\r\n        const time = new Date().getTime();\r\n\r\n        if ((time - previousCall) >= delay) {\r\n          previousCall = time;\r\n          callback.apply(null, arguments);\r\n        }\r\n      };\r\n    };\r\n\r\n    // -----------------add event listeners to our canvas ----------------------\r\n\r\n    canvas.addEventListener('mousedown', onMouseDown, false);\r\n    canvas.addEventListener('mouseup', onMouseUp, false);\r\n    canvas.addEventListener('mouseout', onMouseUp, false);\r\n    canvas.addEventListener('mousemove', throttle(onMouseMove, 10), false);\r\n\r\n    // Touch support for mobile devices\r\n    canvas.addEventListener('touchstart', onMouseDown, false);\r\n    canvas.addEventListener('touchend', onMouseUp, false);\r\n    canvas.addEventListener('touchcancel', onMouseUp, false);\r\n    canvas.addEventListener('touchmove', throttle(onMouseMove, 10), false);\r\n\r\n    // -------------- make the canvas fill its parent component -----------------\r\n\r\n    const onResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    window.addEventListener('resize', onResize, false);\r\n    onResize();\r\n\r\n    // ----------------------- socket.io connection ----------------------------\r\n    const onDrawingEvent = (data) => {\r\n      const w = canvas.width;\r\n      const h = canvas.height;\r\n      drawLine(data.x0 * w, data.y0 * h, data.x1 * w, data.y1 * h, data.color);\r\n    }\r\n\r\n    socketRef.current = io.connect('/');\r\n    socketRef.current.on('drawing', onDrawingEvent);\r\n  }, []);\r\n\r\n  // ------------- The Canvas and color elements --------------------------\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef} className=\"whiteboard\" />\r\n\r\n      <div ref={colorsRef} className=\"colors\">\r\n        <div className=\"color black\" />\r\n        <div className=\"color red\" />\r\n        <div className=\"color green\" />\r\n        <div className=\"color blue\" />\r\n        <div className=\"color yellow\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"26","replacedBy":"30"},{"ruleId":"28","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":16},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],["36"],["37"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]